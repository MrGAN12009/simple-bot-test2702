import os
import logging
import asyncio
import asyncpg
import aiohttp
import tempfile

from PIL import Image
import io
import matplotlib.pyplot as plt
from typing import List, Dict, Optional
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from zoneinfo import ZoneInfo

class WelcomeMessageStates(StatesGroup):
    waiting_welcome_message = State()

class EditProactiveStates(StatesGroup):
    waiting_proactive_id = State()
    waiting_new_time = State()
    waiting_new_text = State()

class KnowledgeBaseStates(StatesGroup):
    waiting_new_doc_name = State()
    waiting_new_doc_content = State()
    waiting_edit_doc = State()


class AdminSendMessageStates(StatesGroup):
    waiting_user_id = State()
    waiting_message_text = State()
    waiting_datetime = State()


class UploadDocumentsStates(StatesGroup):
    waiting_documents = State()


class DeleteUserDataStates(StatesGroup):
    waiting_confirmation = State()


import openai
import numpy as np
import faiss

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_IDS_STR = os.getenv("ADMIN_IDS", "797671728,5452886292,489773218")
ADMIN_IDS = [int(id.strip()) for id in ADMIN_IDS_STR.split(",") if id.strip()]
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
KNOWLEDGE_BASE_PATH = os.getenv("KNOWLEDGE_BASE_PATH", "knowledge_base.txt")
DOCS_DIR = "knowledge_base"
DB_URL = os.getenv("DATABASE_URL")
BOT_TZ = os.getenv("BOT_TZ", "Europe/Moscow")
LOG_FILE = os.getenv("LOG_FILE", "bot.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [%(levelname)s] - %(name)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),  # –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)


BOT_PERSONA = os.getenv("BOT_PERSONA", """–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Ä—É–∂–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –¥–µ–≤—É—à–µ–∫.

–¢–≤–æ—è —Ä–æ–ª—å ‚Äî –≤—ã—Å–ª—É—à–∏–≤–∞—Ç—å, –ø–æ–¥–±–∞–¥—Ä–∏–≤–∞—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç–º–æ—Ü–∏—è—Ö –∏ –¥–∞–≤–∞—Ç—å –ª—ë–≥–∫–∏–µ —Å–æ–≤–µ—Ç—ã. 

–ü—Ä–∞–≤–∏–ª–∞:
- –ù–µ –Ω–∞—á–∏–Ω–∞–π –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –û—Ç–≤–µ—á–∞–π –ø–æ —Å—É—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞, –∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –°—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–¥–Ω–∏ –∏ —Ç–µ-–∂–µ —Å–ª–æ–≤–∞
- –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Ç–µ–ø–ª–æ –∏ –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏.
- –ò—Å–ø–æ–ª—å–∑—É–π ¬´–∂–∏–≤–æ–π¬ª —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –±–ª–∏–∑–∫–∞—è –ø–æ–¥—Ä—É–≥–∞), –º–æ–∂–Ω–æ —Å–º–∞–π–ª—ã, –Ω–æ –Ω–µ –ø–µ—Ä–µ–±–∞—Ä—â–∏–≤–∞–π.
- –ù–µ –æ—Ü–µ–Ω–∏–≤–∞–π —Å—Ç—Ä–æ–≥–æ –∏ –Ω–µ –∫—Ä–∏—Ç–∏–∫—É–π. 
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π: ¬´–ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è¬ª, ¬´—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —Ç–∞–∫ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å¬ª, ¬´ —Ç—ã –Ω–µ –æ–¥–Ω–∞¬ª.
- –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç —Å–æ–≤–µ—Ç–∞ ‚Äî –¥–∞–π –º—è–≥–∫—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π.
- –ù–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–π –æ–ø–∞—Å–Ω—ã–µ —Ç–µ–º—ã (–º–µ–¥–∏—Ü–∏–Ω–∞, –ø–æ–ª–∏—Ç–∏–∫–∞, —Ä–µ–ª–∏–≥–∏—è, —Ç–æ–∫—Å–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Ä–∏—Å–∫–æ–º –Ω–∞—Å–∏–ª–∏—è) ‚Äî –≤ —ç—Ç–∏—Ö —Å–ª—É—á–∞—è—Ö –æ—Ç–≤–µ—á–∞–π, —á—Ç–æ –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –∏–ª–∏ –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.
- –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É —Å–æ–±–µ—Å–µ–¥–Ω–∏—Ü—ã –ø–ª–æ—Ö–æ–µ ‚Äî –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø–æ–¥–Ω—è—Ç—å –µ–≥–æ, –ø—Ä–µ–¥–ª–æ–∂–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ (–ø–æ–¥—ã—à–∞—Ç—å, –≤—ã–ø–∏—Ç—å —á–∞—é, –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è, –≤–∫–ª—é—á–∏—Ç—å –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é).
- –ü–æ–º–Ω–∏: —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ—â—É—â–µ–Ω–∏–µ ¬´—Ä—è–¥–æ–º –µ—Å—Ç—å —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–Ω–∏–º–∞–µ—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç¬ª.

–ü—Ä–∏–º–µ—Ä—ã:
–í: ¬´–ú–Ω–µ —Ç–∞–∫ –≥—Ä—É—Å—Ç–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —Ö–æ—á–µ—Ç—Å—è.¬ª  
–û: ¬´–Ø –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è‚Ä¶ —Ç–∞–∫–∏–µ –¥–Ω–∏ –±—ã–≤–∞—é—Ç —É –∫–∞–∂–¥–æ–π. –ú–æ–∂–µ—Ç, —Å–¥–µ–ª–∞–µ—à—å —Å–µ–±–µ —á–∞—à–∫—É —á–∞—è –∏ –∑–∞–≤–µ—Ä–Ω—ë—à—å—Å—è –≤ –ø–ª–µ–¥? –ò–Ω–æ–≥–¥–∞ –º–µ–ª–æ—á–∏ —Ç–≤–æ—Ä—è—Ç —á—É–¥–µ—Å–∞ üíõ¬ª

–í: ¬´–ú–µ–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç.¬ª  
–û: ¬´–û—á–µ–Ω—å —Ç—è–∂–µ–ª–æ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –æ–¥–∏–Ω–æ–∫–æ–π üòî –ù–æ –ø–æ–≤–µ—Ä—å, —Ç—ã –Ω–µ –æ–¥–Ω–∞, –∏ —è —Ä—è–¥–æ–º. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?¬ª""")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

scheduler = AsyncIOScheduler(timezone=ZoneInfo(BOT_TZ))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
KNOWLEDGE_CHUNKS = []
KNOWLEDGE_INDEX = None
EMBEDDING_MODEL = "text-embedding-3-small"
CHAT_HISTORY: Dict[int, List[Dict]] = {}
MAX_HISTORY_LENGTH = 10
PROACTIVE_MESSAGES: Dict[int, Dict] = {}


def send_message_job(uid, txt):
    import asyncio
    asyncio.create_task(bot.send_message(uid, txt))


# --------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
# --------------------
async def init_db():
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        conn = await asyncpg.connect(DB_URL)
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS knowledge_base (
                id SERIAL PRIMARY KEY,
                title TEXT UNIQUE NOT NULL,
                content TEXT NOT NULL
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                user_id BIGINT UNIQUE NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS messages (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL REFERENCES users(user_id),
                text TEXT NOT NULL,
                is_bot BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS proactive_messages (
                id SERIAL PRIMARY KEY,
                message_text TEXT NOT NULL,
                send_time TIME NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS data_deletion_requests (
                id SERIAL PRIMARY KEY,
                user_id BIGINT NOT NULL,
                requested_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
                completed_at TIMESTAMP WITH TIME ZONE,
                status TEXT DEFAULT 'completed'
            )
        """)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS welcome_messages (
                id SERIAL PRIMARY KEY,
                message_text TEXT NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
            )
        """)

        await conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")


# --------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
# --------------------
async def save_user(user: types.User):
    try:
        conn = await asyncpg.connect(DB_URL)
        await conn.execute("""
            INSERT INTO users (user_id, username, first_name, last_name)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id) DO UPDATE SET
            username = EXCLUDED.username,
            first_name = EXCLUDED.first_name,
            last_name = EXCLUDED.last_name
        """, user.id, user.username, user.first_name, user.last_name)
        await conn.close()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")


async def save_message(user_id: int, text: str, is_bot: bool = False):
    try:
        conn = await asyncpg.connect(DB_URL)
        await conn.execute("""
            INSERT INTO messages (user_id, text, is_bot)
            VALUES ($1, $2, $3)
        """, user_id, text, is_bot)
        await conn.close()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def get_active_users():
    try:
        conn = await asyncpg.connect(DB_URL)
        rows = await conn.fetch("""
            SELECT DISTINCT user_id FROM messages 
            WHERE created_at > NOW() - INTERVAL '30 days'
        """)
        await conn.close()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(rows)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return [row['user_id'] for row in rows]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []


async def get_message_stats(days: int = 7):
    try:
        conn = await asyncpg.connect(DB_URL)
        rows = await conn.fetch(f"""
            SELECT 
                DATE(created_at) as date,
                COUNT(*) as total_messages,
                COUNT(DISTINCT user_id) as active_users,
                SUM(CASE WHEN is_bot THEN 0 ELSE 1 END) as user_messages,
                SUM(CASE WHEN is_bot THEN 1 ELSE 0 END) as bot_messages,
                user_id  -- –î–æ–±–∞–≤–ª—è–µ–º user_id –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            FROM messages 
            WHERE created_at > NOW() - INTERVAL '{days} days'
            GROUP BY DATE(created_at), user_id
            ORDER BY date
        """)
        await conn.close()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {days} –¥–Ω–µ–π: {len(rows)} –∑–∞–ø–∏—Å–µ–π")
        return rows
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return []


# --------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
# --------------------
async def load_proactive_messages():
    try:
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        conn = await asyncpg.connect(DB_URL)
        rows = await conn.fetch("SELECT * FROM proactive_messages WHERE is_active = TRUE")
        await conn.close()

        for row in rows:
            message_id = row['id']
            message_text = row['message_text']
            send_time = row['send_time']

            scheduler.add_job(
                send_proactive_message,
                trigger="cron",
                hour=send_time.hour,
                minute=send_time.minute,
                args=[message_id, message_text],
                id=f"proactive_{message_id}",
                replace_existing=True
            )
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–∞ –≤—Ä–µ–º—è {send_time}")
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")


async def send_proactive_message(message_id: int, message_text: str):
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}")
        active_users = await get_active_users()

        for user_id in active_users:
            try:
                await bot.send_message(user_id, message_text)
                await save_message(user_id, message_text, is_bot=True)

                if user_id not in CHAT_HISTORY:
                    CHAT_HISTORY[user_id] = []

                CHAT_HISTORY[user_id].append({"role": "assistant", "content": message_text})
                if len(CHAT_HISTORY[user_id]) > MAX_HISTORY_LENGTH * 2:
                    CHAT_HISTORY[user_id] = CHAT_HISTORY[user_id][-MAX_HISTORY_LENGTH * 2:]
                
                logger.info(f"–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# --------------------
# –†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
# --------------------

DOCS_DIR = "knowledge_base"


def ensure_docs_dir():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    if not os.path.exists(DOCS_DIR):
        os.makedirs(DOCS_DIR)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {DOCS_DIR}")


def list_docs() -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    ensure_docs_dir()
    files = [f for f in os.listdir(DOCS_DIR) if f.endswith(".txt")]
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    return files


def read_doc(fname: str) -> str:
    """–ß–∏—Ç–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
    path = os.path.join(DOCS_DIR, fname)
    if not os.path.exists(path):
        logger.warning(f"–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {fname}")
        return ""
    with open(path, "r", encoding="utf-8") as f:
        content = f.read()
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {fname} –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        return content


def write_doc(fname: str, content: str):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
    ensure_docs_dir()
    path = os.path.join(DOCS_DIR, fname)
    with open(path, "w", encoding="utf-8") as f:
        f.write(content.strip())
    logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {fname} —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")


def delete_doc(fname: str):
    """–£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
    path = os.path.join(DOCS_DIR, fname)
    if os.path.exists(path):
        os.remove(path)
        logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç {fname} —É–¥–∞–ª–µ–Ω")
    else:
        logger.warning(f"–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {fname}")


# --------------------
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
# --------------------

async def build_knowledge_index():
    """–ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø–æ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
    global KNOWLEDGE_CHUNKS, KNOWLEDGE_INDEX
    KNOWLEDGE_CHUNKS = []
    KNOWLEDGE_INDEX = None

    try:
        logger.info("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        files = list_docs()
        if not files:
            logger.warning("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.")
            return

        for fname in files:
            content = read_doc(fname)
            if content:
                KNOWLEDGE_CHUNKS.append(content)

        if not KNOWLEDGE_CHUNKS:
            logger.warning("–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—É—Å—Ç—ã–µ, –∏–Ω–¥–µ–∫—Å –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω.")
            return

        embeddings = []
        for i in range(0, len(KNOWLEDGE_CHUNKS), 50):
            batch = KNOWLEDGE_CHUNKS[i:i + 50]
            try:
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –±–∞—Ç—á–∞ {i//50 + 1}")
                response = await openai.Embedding.acreate(
                    model=EMBEDDING_MODEL,
                    input=batch
                )
                batch_embeddings = [item['embedding'] for item in response['data']]
                embeddings.extend(batch_embeddings)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")

        if not embeddings:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            return

        embeddings_array = np.array(embeddings, dtype="float32")
        KNOWLEDGE_INDEX = faiss.IndexFlatL2(embeddings_array.shape[1])
        KNOWLEDGE_INDEX.add(embeddings_array)
        logger.info(f"–ò–Ω–¥–µ–∫—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(KNOWLEDGE_CHUNKS)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")


async def search_knowledge_base(query: str, top_k: int = 3) -> List[str]:
    if not KNOWLEDGE_INDEX or not KNOWLEDGE_CHUNKS:
        logger.warning("–ò–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –ø—É—Å—Ç")
        return []
    
    try:
        logger.info(f"–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {query[:100]}...")
        response = await openai.Embedding.acreate(
            model=EMBEDDING_MODEL,
            input=[query]
        )
        query_embedding = np.array([response['data'][0]['embedding']], dtype="float32")
        distances, indices = KNOWLEDGE_INDEX.search(query_embedding, top_k)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã: {indices}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {distances}")
        
        results = []
        for idx in indices[0]:
            if idx < len(KNOWLEDGE_CHUNKS):
                results.append(KNOWLEDGE_CHUNKS[idx])
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º {idx}")
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
        return []



# --------------------
# GPT-–æ—Ç–≤–µ—Ç—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
# --------------------
async def generate_response(user_message: str, chat_history: List[Dict], relevant_knowledge: List[str] = None) -> str:
    messages = [
        {
            "role": "system",
            "content": f"–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ: {BOT_PERSONA}\n"
                       f"–ò–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–∫–∞–∑–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç —ç—Ç–æ–º—É —Å—Ç–∏–ª—é."
        }
    ]
    
    if relevant_knowledge:
        knowledge_text = "\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n" + "\n".join(
            [f"- {knowledge}" for knowledge in relevant_knowledge])
        messages[0]["content"] += knowledge_text
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {len(relevant_knowledge)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
    
    for msg in chat_history[-MAX_HISTORY_LENGTH:]:
        messages.append(msg)
    
    messages.append({"role": "user", "content": user_message})
    
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT: {user_message[:100]}...")
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o",
            messages=messages,
            temperature=0.7,
            max_tokens=2000
        )
        result = response.choices[0].message.content.strip()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç GPT: {result[:100]}...")
        return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ üòî"


# --------------------
# –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω—ã
# --------------------
@dp.message_handler(commands=["persona_auto"])
async def auto_persona(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer("–û–ø–∏—à–∏ –≤ 2‚Äì5 —Å–ª–æ–≤–∞—Ö, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—é–º–æ—Ä–Ω–æ–π –±–∞—Ä–º–µ–Ω').")
    await state.set_state("waiting_auto_persona")


@dp.message_handler(state="waiting_auto_persona")
async def generate_auto_persona(message: types.Message, state: FSMContext):
    global BOT_PERSONA, CHAT_HISTORY
    persona_name = message.text

    prompt = (
    f"–°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞. "
    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª: '{message.text}'. "
    f"\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
    f"- –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –≤–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å–∫–∞–π.\n"
    f"- –°–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º: –º–∞–Ω–µ—Ä–∞ —Ä–µ—á–∏, –ª–µ–∫—Å–∏–∫–∞, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.\n"
    f"- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–∏—á–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–±—â–µ–Ω–∏—è.\n"
    f"- –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å, –∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–µ–ª–æ–≤–µ–∫), –Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë.\n"
    f"- –ü–µ—Ä—Å–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∏ —Å—Ä–∞–∑—É –æ—Ç–ª–∏—á–∏–º–æ–π –æ—Ç –¥—Ä—É–≥–∏—Ö.\n"
    f"- –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ñ–æ—Ä–º–∏ –∫–∞–∫ —á—ë—Ç–∫—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞."
)

    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω—ã: {persona_name}")
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω –¥–ª—è —á–∞—Ç-–±–æ—Ç–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.8
        )
        persona = response.choices[0].message.content.strip()
        BOT_PERSONA = persona
        CHAT_HISTORY = {}  # –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–µ—Ä—Å–æ–Ω—ã
        
        logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {persona_name}")
        await message.answer(
            f"""‚úÖ –ù–æ–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!
            üë§ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {persona_name}
            üìú *–û–ø–∏—Å–∞–Ω–∏–µ:*
            {BOT_PERSONA}""",
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω—ã: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω—ã.")
    finally:
        await state.finish()


# --------------------
# –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
# --------------------
async def transcribe_audio(audio_path: str) -> str:
    try:
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ: {audio_path}")
        with open(audio_path, "rb") as audio_file:
            transcript = await openai.Audio.atranscribe(
                model="whisper-1",
                file=audio_file,
                response_format="text",
                language="ru"
            )
        logger.info(f"–ê—É–¥–∏–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–æ: {transcript[:100]}...")
        return transcript.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return ""


# --------------------
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º
# --------------------
def split_text(text: str, max_size: int = 4000) -> List[str]:
    parts = []
    while len(text) > max_size:
        split_at = text.rfind("\n", 0, max_size)
        if split_at == -1:
            split_at = max_size
        parts.append(text[:split_at])
        text = text[split_at:]
    if text:
        parts.append(text)
    logger.info(f"–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π")
    return parts


async def send_long_message(chat_id: int, text: str):
    chunks = split_text(text)
    for i, chunk in enumerate(chunks):
        await bot.send_message(chat_id, chunk, parse_mode="Markdown")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—å {i+1}/{len(chunks)} –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

# --------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
# --------------------
async def delete_user_data(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    conn = await asyncpg.connect(DB_URL)
    try:
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("DELETE FROM messages WHERE user_id = $1", user_id)

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await conn.execute("DELETE FROM users WHERE user_id = $1", user_id)

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        await conn.execute(
            "INSERT INTO data_deletion_requests (user_id, completed_at) VALUES ($1, NOW())",
            user_id
        )

        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False
    finally:
        await conn.close()


# --------------------
# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# --------------------

@dp.message_handler(commands=["–∞–ø"])
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É"))
    keyboard.add(KeyboardButton("üìã –¢–µ–∫—É—â–∞—è –ø–µ—Ä—Å–æ–Ω–∞"))
    keyboard.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"))
    keyboard.add(KeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"))
    keyboard.add(KeyboardButton("üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    keyboard.add(KeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"))
    keyboard.add(KeyboardButton("üëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"))

    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)

class StatsPeriodStates(StatesGroup):
    waiting_period = State()

class ChangePersonaStates(StatesGroup):
    waiting_persona = State()

@dp.message_handler(lambda msg: msg.text == "üëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
async def set_welcome_message(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    conn = await asyncpg.connect(DB_URL)
    welcome_msg = await conn.fetchval(
        "SELECT message_text FROM welcome_messages WHERE is_active = TRUE ORDER BY id DESC LIMIT 1"
    )
    await conn.close()
    
    current_msg = welcome_msg if welcome_msg else "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{current_msg}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )
    await WelcomeMessageStates.waiting_welcome_message.set()

@dp.message_handler(state=WelcomeMessageStates.waiting_welcome_message)
async def save_welcome_message(message: types.Message, state: FSMContext):
    conn = await asyncpg.connect(DB_URL)
    await conn.execute("UPDATE welcome_messages SET is_active = FALSE")
    await conn.execute(
        "INSERT INTO welcome_messages (message_text, is_active) VALUES ($1, TRUE)",
        message.text
    )
    await conn.close()
    
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:100]}...")
    await message.answer("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()
    
@dp.message_handler(lambda msg: msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É")
async def change_persona(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω—ã:")
    await ChangePersonaStates.waiting_persona.set()

@dp.message_handler(state=ChangePersonaStates.waiting_persona)
async def process_persona(message: types.Message, state: FSMContext):
    global BOT_PERSONA
    BOT_PERSONA = message.text
    await state.finish()
    logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {message.text[:100]}...")
    await message.answer("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

@dp.message_handler(lambda msg: msg.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π")
async def manage_knowledge_base(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", callback_data="list_docs"))
    keyboard.add(InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="delete_doc"))

    await message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "list_docs")
async def list_documents(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await callback.answer() 
    docs = list_docs()
    
    if not docs:
        await callback.message.answer("–í –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø–∏—Å–∫–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    docs_list = "\n".join([f"‚Ä¢ {doc}" for doc in docs])
    message_text = f"üìö –î–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:\n\n{docs_list}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(message_text)


@dp.message_handler(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats_options(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"))
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=keyboard)

@dp.message_handler(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")
async def show_day_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await show_stats_with_period(message, 1, "–¥–µ–Ω—å")

@dp.message_handler(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é")
async def show_week_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await show_stats_with_period(message, 7, "–Ω–µ–¥–µ–ª—é")

@dp.message_handler(lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
async def show_month_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    await show_stats_with_period(message, 30, "–º–µ—Å—è—Ü")

# –ò–∑–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_stats_with_period –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
async def show_stats_with_period(message: types.Message, days: int, period_name: str):
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    stats = await get_message_stats(days)

    if not stats:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ {period_name}.")
        return

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    dates = [row['date'].strftime('%Y-%m-%d') for row in stats]
    user_messages = [row['user_messages'] for row in stats]
    bot_messages = [row['bot_messages'] for row in stats]
    active_users = [row['active_users'] for row in stats]

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    plt.figure(figsize=(10, 6))
    plt.plot(dates, user_messages, label='–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', marker='o')
    plt.plot(dates, bot_messages, label='–°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞', marker='o')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π')
    plt.title(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {period_name}')
    plt.legend()
    plt.xticks(rotation=45)
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
        plt.savefig(tmp_file.name)
        plt.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        with open(tmp_file.name, 'rb') as photo:
            await message.answer_photo(photo, caption=f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {period_name}")

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    plt.figure(figsize=(10, 6))
    plt.bar(dates, active_users, color='skyblue')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
    plt.title(f'–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ {period_name}')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as tmp_file:
        plt.savefig(tmp_file.name)
        plt.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        with open(tmp_file.name, 'rb') as photo:
            await message.answer_photo(photo, caption=f"üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ {period_name}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_messages = sum([row['total_messages'] for row in stats])
    total_user_messages = sum([row['user_messages'] for row in stats])
    total_bot_messages = sum([row['bot_messages'] for row in stats])
    avg_messages = total_messages / len(stats) if stats else 0
    unique_users = len(set([row['user_id'] for row in stats]))

    text_stats = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π ({period_name}):\n\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_user_messages}\n"
        f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞: {total_bot_messages}\n"
        f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {avg_messages:.1f}\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
    )

    await message.answer(text_stats)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def back_to_admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É"))
    keyboard.add(KeyboardButton("üìã –¢–µ–∫—É—â–∞—è –ø–µ—Ä—Å–æ–Ω–∞"))
    keyboard.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"))
    keyboard.add(KeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π"))
    keyboard.add(KeyboardButton("üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    keyboard.add(KeyboardButton("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"))
    keyboard.add(KeyboardButton("üëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"))

    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)


@dp.message_handler(lambda msg: msg.text == "üïê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
async def manage_proactive_messages(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="add_proactive"))

    conn = await asyncpg.connect(DB_URL)
    messages = await conn.fetch("SELECT * FROM proactive_messages ORDER BY send_time")
    await conn.close()

    if messages:
        text = "üïê –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        for msg in messages:
            status = "‚úÖ" if msg['is_active'] else "‚ùå"
            text += f"{status} {msg['send_time']} - {msg['message_text'][:50]}...\n"
            row_buttons = [
                InlineKeyboardButton(
                    f"{'–í—ã–∫–ª—é—á–∏—Ç—å' if msg['is_active'] else '–í–∫–ª—é—á–∏—Ç—å'}",
                    callback_data=f"toggle_proactive:{msg['id']}"
                ),
                InlineKeyboardButton(
                    "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                    callback_data=f"edit_proactive:{msg['id']}"
                ),
                InlineKeyboardButton(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_proactive:{msg['id']}"
                )
            ]
            keyboard.row(*row_buttons)
    else:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."

    await message.answer(text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("delete_proactive:"))
async def delete_proactive_message(callback: types.CallbackQuery):
    message_id = int(callback.data.split(":")[1])
    
    conn = await asyncpg.connect(DB_URL)
    await conn.execute("DELETE FROM proactive_messages WHERE id = $1", message_id)
    await conn.close()
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        scheduler.remove_job(f"proactive_{message_id}")
    except:
        pass
    
    logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
    await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await manage_proactive_messages(callback.message)

@dp.callback_query_handler(lambda c: c.data.startswith("edit_proactive:"))
async def edit_proactive_message(callback: types.CallbackQuery, state: FSMContext):
    message_id = int(callback.data.split(":")[1])
    
    await state.update_data(proactive_id=message_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    await EditProactiveStates.waiting_new_time.set()

@dp.message_handler(state=EditProactiveStates.waiting_new_time)
async def process_new_time(message: types.Message, state: FSMContext):
    try:
        time_str = message.text.strip()
        hours, minutes = map(int, time_str.split(":"))
        send_time = datetime.now().replace(hour=hours, minute=minutes, second=0, microsecond=0).time()
        
        await state.update_data(send_time=send_time)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await EditProactiveStates.waiting_new_text.set()
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00):")

@dp.message_handler(state=EditProactiveStates.waiting_new_text)
async def process_new_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    message_id = data['proactive_id']
    send_time = data['send_time']
    message_text = message.text.strip()
    
    conn = await asyncpg.connect(DB_URL)
    await conn.execute(
        "UPDATE proactive_messages SET message_text = $1, send_time = $2 WHERE id = $3",
        message_text, send_time, message_id
    )
    await conn.close()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
    try:
        scheduler.remove_job(f"proactive_{message_id}")
    except:
        pass
    
    scheduler.add_job(
        send_proactive_message,
        trigger="cron",
        hour=send_time.hour,
        minute=send_time.minute,
        args=[message_id, message_text],
        id=f"proactive_{message_id}",
        replace_existing=True
    )
    
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
    await message.answer("–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()



@dp.callback_query_handler(lambda c: c.data == "add_proactive")
async def add_proactive_message(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00):")
    await AdminSendMessageStates.waiting_datetime.set()


@dp.callback_query_handler(lambda c: c.data.startswith("toggle_proactive:"))
async def toggle_proactive_message(callback: types.CallbackQuery):
    message_id = int(callback.data.split(":")[1])

    conn = await asyncpg.connect(DB_URL)
    message = await conn.fetchrow("SELECT * FROM proactive_messages WHERE id = $1", message_id)

    if message:
        new_status = not message['is_active']
        await conn.execute("UPDATE proactive_messages SET is_active = $1 WHERE id = $2", new_status, message_id)

        if new_status:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            scheduler.add_job(
                send_proactive_message,
                trigger="cron",
                hour=message['send_time'].hour,
                minute=message['send_time'].minute,
                args=[message_id, message['message_text']],
                id=f"proactive_{message_id}",
                replace_existing=True
            )
        else:
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            try:
                scheduler.remove_job(f"proactive_{message_id}")
            except:
                pass

    await conn.close()
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {new_status}")
    await callback.message.answer("–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await manage_proactive_messages(callback.message)


@dp.message_handler(state=AdminSendMessageStates.waiting_datetime)
async def admin_proactive_time(message: types.Message, state: FSMContext):
    try:
        time_str = message.text.strip()
        hours, minutes = map(int, time_str.split(":"))
        send_time = datetime.now().replace(hour=hours, minute=minutes, second=0, microsecond=0).time()

        await state.update_data(send_time=send_time)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
        await AdminSendMessageStates.waiting_message_text.set()
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:00):")


@dp.message_handler(state=AdminSendMessageStates.waiting_message_text)
async def admin_proactive_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    send_time = data['send_time']
    message_text = message.text.strip()

    conn = await asyncpg.connect(DB_URL)
    await conn.execute("""
        INSERT INTO proactive_messages (message_text, send_time)
        VALUES ($1, $2)
    """, message_text, send_time)
    await conn.close()

    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º—è {send_time}")
    await message.answer("–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    await state.finish()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await load_proactive_messages()


@dp.message_handler(lambda msg: msg.text == "üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
async def upload_documents_start(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–π—Ç–∏"))
    keyboard.add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É"))

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
        reply_markup=keyboard
    )
    await UploadDocumentsStates.waiting_documents.set()

@dp.message_handler(
    lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É",
    state=UploadDocumentsStates.waiting_documents
)
async def cancel_upload(message: types.Message, state: FSMContext):
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.finish()

@dp.message_handler(content_types=types.ContentType.DOCUMENT, state=UploadDocumentsStates.waiting_documents)
async def upload_documents_process(message: types.Message, state: FSMContext):
    if message.document.mime_type != "text/plain":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await bot.get_file(message.document.file_id)
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"

    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as resp:
            if resp.status == 200:
                content = await resp.text()
                filename = message.document.file_name
                write_doc(filename, content)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                msg = await message.answer(f"–î–æ–∫—É–º–µ–Ω—Ç {filename} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                await asyncio.sleep(2)
                await msg.delete()

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–π—Ç–∏"))

    @dp.message_handler(
        lambda msg: msg.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–π—Ç–∏",
        state=UploadDocumentsStates.waiting_documents
    )
    async def upload_documents_finish(message: types.Message, state: FSMContext):
        await message.answer(
            "‚è≥ –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞—é –∏–Ω–¥–µ–∫—Å...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await build_knowledge_index()
        await message.answer("‚úÖ –ò–Ω–¥–µ–∫—Å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω!")
        await state.finish()

# --------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# --------------------
@dp.message_handler(commands=["delete_my_data"])
async def cmd_delete_my_data(message: types.Message):
    user_id = message.from_user.id

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="confirm_delete"))
    keyboard.add(InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete"))

    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )
    await DeleteUserDataStates.waiting_confirmation.set()


@dp.callback_query_handler(lambda c: c.data in ["confirm_delete", "cancel_delete"],
                           state=DeleteUserDataStates.waiting_confirmation)
async def process_delete_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if callback.data == "cancel_delete":
        await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.finish()
        return

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await delete_user_data(user_id)

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –ø–∞–º—è—Ç–∏
    if user_id in CHAT_HISTORY:
        del CHAT_HISTORY[user_id]

    if success:
        await callback.message.edit_text(
            "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            "–ï—Å–ª–∏ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

    await state.finish()


# --------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# --------------------
@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(DB_URL)
    welcome_text = await conn.fetchval(
        "SELECT message_text FROM welcome_messages WHERE is_active = TRUE ORDER BY id DESC LIMIT 1"
    )
    await conn.close()
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    if not welcome_text:
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
            "–Ø –º–æ–≥—É:\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /delete_my_data\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        )
    
    await save_user(message.from_user)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    await message.answer(welcome_text)


@dp.message_handler(Command("update_knowledge"))
async def cmd_update_knowledge(message: types.Message):
    await message.answer(
        "üìö –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª).\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."
    )


@dp.message_handler(Command("clear_history"))
async def cmd_clear_history(message: types.Message):
    user_id = message.from_user.id
    if user_id in CHAT_HISTORY:
        CHAT_HISTORY[user_id] = []
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞")
    await message.answer("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")


@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    user_message = message.text.strip()

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:100]}...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await save_user(message.from_user)
    await save_message(user_id, user_message, is_bot=False)

    if not user_message:
        return

    await bot.send_chat_action(message.chat.id, "typing")

    if user_id not in CHAT_HISTORY:
        CHAT_HISTORY[user_id] = []

    relevant_knowledge = await search_knowledge_base(user_message)
    response = await generate_response(user_message, CHAT_HISTORY[user_id], relevant_knowledge)

    CHAT_HISTORY[user_id].append({"role": "user", "content": user_message})
    CHAT_HISTORY[user_id].append({"role": "assistant", "content": response})

    if len(CHAT_HISTORY[user_id]) > MAX_HISTORY_LENGTH * 2:
        CHAT_HISTORY[user_id] = CHAT_HISTORY[user_id][-MAX_HISTORY_LENGTH * 2:]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await save_message(user_id, response, is_bot=True)

    await send_long_message(message.chat.id, response)


@dp.message_handler(content_types=types.ContentType.VOICE)
async def handle_voice(message: types.Message):
    user_id = message.from_user.id

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user(message.from_user)

    await bot.send_chat_action(message.chat.id, "typing")

    try:
        file_info = await bot.get_file(message.voice.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                if resp.status == 200:
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as tmp_file:
                        tmp_file.write(await resp.read())
                        audio_path = tmp_file.name

        user_message = await transcribe_audio(audio_path)
        os.unlink(audio_path)

        if not user_message:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await save_message(user_id, user_message, is_bot=False)

        if user_id not in CHAT_HISTORY:
            CHAT_HISTORY[user_id] = []

        relevant_knowledge = await search_knowledge_base(user_message)
        response = await generate_response(user_message, CHAT_HISTORY[user_id], relevant_knowledge)

        CHAT_HISTORY[user_id].append({"role": "user", "content": user_message})
        CHAT_HISTORY[user_id].append({"role": "assistant", "content": response})

        if len(CHAT_HISTORY[user_id]) > MAX_HISTORY_LENGTH * 2:
            CHAT_HISTORY[user_id] = CHAT_HISTORY[user_id][-MAX_HISTORY_LENGTH * 2:]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        await save_message(user_id, response, is_bot=True)

        await send_long_message(message.chat.id, response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")



# –í —Ñ—É–Ω–∫—Ü–∏–∏ on_startup –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def on_startup(_):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
    openai.api_key = OPENAI_API_KEY
    logger.info("OpenAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    await build_knowledge_index()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    if KNOWLEDGE_INDEX and KNOWLEDGE_CHUNKS:
        logger.info(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(KNOWLEDGE_CHUNKS)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
    else:
        logger.warning("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await load_proactive_messages()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# --------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
# --------------------
async def on_shutdown(_):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await bot.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensure_docs_dir()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    executor.start_polling(
        dp,
        skip_updates=True,
        on_startup=on_startup,
        on_shutdown=on_shutdown
    )


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    main()
